name: ci-cd

on: [push, pull_request]


jobs:
  ci:
    # Step 1. Set up operating system
    runs-on: ubuntu-latest
    steps:
    # Step 2. Set up Python 3.9
    - uses: actions/setup-python@v2
      with:
        python-version: 3.9
    # Step 3. Check-out repository so we can access its contents
    - uses: actions/checkout@v2
    # Step 4. Install poetry
    - uses: snok/install-poetry@v1
    # Step 5. Install our package
    - name: Install package
      run: poetry install
    
    ### New
    # Step 6. Check style
    - name: Check style
      run: poetry run flake8 --exclude=docs* --max-line-length 120
      
    # Step 7. Run tests for package
    - name: Test with pytest
      run: poetry run pytest tests/ --cov=pycounts_thomassiu --cov-report=xml
    # Step 8. Use Codecov to track coverage
    - uses: codecov/codecov-action@v2
      with:
        files: ./coverage.xml   # coverage report
        fail_ci_if_error: true  # terminate workflow if there's an error
    # Step 9. Build documentation
    - name: Build documentation
      run: poetry run make html --directory docs/
  cd:
    # Only run this job if the "ci" job passes
    needs: ci
    # Only run this job if new work is pushed to "main"
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    # Step 1. Set up operating system
    runs-on: ubuntu-latest
    steps:
    # Step 2. Set up Python 3.9
    - uses: actions/setup-python@v2
      with:
        python-version: 3.9
    # Step 3. Check-out repository so we can access its contents
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    
    ### new
    # Step 4. Install poetry
    - uses: snok/install-poetry@v1
    # Step 5. Install our package
    - name: Install package
      run: poetry install     
    ###  
    
    # Step 6. Turn off branch protection
    - name: Disable admin branch protection
      uses: benjefferies/branch-protection-bot@master
      if: always()
      with:
          access_token: ${{ secrets.ACCESS_TOKEN }}
          branch: main
          enforce_admins: false
          
    - name: Bump version and tagging and publish
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git pull origin main
        poetry run semantic-release version
        poetry version $(grep "version" */__init__.py | cut -d "'" -f 2 | cut -d '"' -f 2)
        git commit -m "[skip actions] Bump versions" -a
        
    - name: Push package version changes
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.ACCESS_TOKEN }}

    # Step 5. Use PSR to make release
    #- name: Python Semantic Release
    #  env:
    #      GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
    #  run: |
    #      pip install python-semantic-release
    #      git config user.name github-actions
    #      git config user.email github-actions@github.com
    #      semantic-release publish
    
    # Step 7. Turn on branch protection
    - name: Enable admin branch protection
      uses: benjefferies/branch-protection-bot@master
      if: always()  # Force to always run this step to ensure "include administrators" is always turned back on
      with:
        access_token: ${{ secrets.ACCESS_TOKEN }}
        branch: main
        enforce_admins: true
    # Step 8. Publish to TestPyPI
    - uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository_url: https://test.pypi.org/legacy/
        skip_existing: true
    # Step 9. Test install from TestPyPI
    - name: Test install from TestPyPI
      run: |
          pip install \
          --index-url https://test.pypi.org/simple/ \
          --extra-index-url https://pypi.org/simple \
          pycounts_thomassiu
    # Step 10. Publish to PyPI
    - uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        skip_existing: true
